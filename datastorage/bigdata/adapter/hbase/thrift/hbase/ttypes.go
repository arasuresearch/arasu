// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hbase

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

//Specify type of delete:
// - DELETE_COLUMN means exactly one version will be removed,
// - DELETE_COLUMNS means previous versions will also be removed.
type TDeleteType int64

const (
	TDeleteType_DELETE_COLUMN  TDeleteType = 0
	TDeleteType_DELETE_COLUMNS TDeleteType = 1
)

func (p TDeleteType) String() string {
	switch p {
	case TDeleteType_DELETE_COLUMN:
		return "TDeleteType_DELETE_COLUMN"
	case TDeleteType_DELETE_COLUMNS:
		return "TDeleteType_DELETE_COLUMNS"
	}
	return "<UNSET>"
}

func TDeleteTypeFromString(s string) (TDeleteType, error) {
	switch s {
	case "TDeleteType_DELETE_COLUMN":
		return TDeleteType_DELETE_COLUMN, nil
	case "TDeleteType_DELETE_COLUMNS":
		return TDeleteType_DELETE_COLUMNS, nil
	}
	return TDeleteType(0), fmt.Errorf("not a valid TDeleteType string")
}

func TDeleteTypePtr(v TDeleteType) *TDeleteType { return &v }

//Specify Durability:
// - SKIP_WAL means do not write the Mutation to the WAL.
// - ASYNC_WAL means write the Mutation to the WAL asynchronously,
// - SYNC_WAL means write the Mutation to the WAL synchronously,
// - FSYNC_WAL means Write the Mutation to the WAL synchronously and force the entries to disk.
type TDurability int64

const (
	TDurability_SKIP_WAL  TDurability = 1
	TDurability_ASYNC_WAL TDurability = 2
	TDurability_SYNC_WAL  TDurability = 3
	TDurability_FSYNC_WAL TDurability = 4
)

func (p TDurability) String() string {
	switch p {
	case TDurability_SKIP_WAL:
		return "TDurability_SKIP_WAL"
	case TDurability_ASYNC_WAL:
		return "TDurability_ASYNC_WAL"
	case TDurability_SYNC_WAL:
		return "TDurability_SYNC_WAL"
	case TDurability_FSYNC_WAL:
		return "TDurability_FSYNC_WAL"
	}
	return "<UNSET>"
}

func TDurabilityFromString(s string) (TDurability, error) {
	switch s {
	case "TDurability_SKIP_WAL":
		return TDurability_SKIP_WAL, nil
	case "TDurability_ASYNC_WAL":
		return TDurability_ASYNC_WAL, nil
	case "TDurability_SYNC_WAL":
		return TDurability_SYNC_WAL, nil
	case "TDurability_FSYNC_WAL":
		return TDurability_FSYNC_WAL, nil
	}
	return TDurability(0), fmt.Errorf("not a valid TDurability string")
}

func TDurabilityPtr(v TDurability) *TDurability { return &v }

type TTimeRange struct {
	MinStamp int64 `thrift:"minStamp,1,required"`
	MaxStamp int64 `thrift:"maxStamp,2,required"`
}

func NewTTimeRange() *TTimeRange {
	rval := &TTimeRange{}
	return rval
}

func (p *TTimeRange) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TTimeRange) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MinStamp = v
	}
	return nil
}

func (p *TTimeRange) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MaxStamp = v
	}
	return nil
}

func (p *TTimeRange) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTimeRange"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TTimeRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minStamp", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:minStamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MinStamp)); err != nil {
		return fmt.Errorf("%T.minStamp (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:minStamp: %s", p, err)
	}
	return err
}

func (p *TTimeRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxStamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:maxStamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MaxStamp)); err != nil {
		return fmt.Errorf("%T.maxStamp (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:maxStamp: %s", p, err)
	}
	return err
}

func (p *TTimeRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTimeRange(%+v)", *p)
}

type TColumn struct {
	Family    []byte  `thrift:"family,1,required"`
	Qualifier *[]byte `thrift:"qualifier,2"`
	Timestamp *int64  `thrift:"timestamp,3"`
}

func NewTColumn() *TColumn {
	rval := &TColumn{}
	return rval
}

func (p *TColumn) IsSetQualifier() bool {
	return p.Qualifier != nil
}

func (p *TColumn) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumn) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = &v
	}
	return nil
}

func (p *TColumn) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Family != nil {
		if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Family); err != nil {
			return fmt.Errorf("%T.family (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:family: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Qualifier != nil {
		if p.IsSetQualifier() {
			if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
			}
			if err := oprot.WriteBinary(*p.Qualifier); err != nil {
				return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
			}
		}
	}
	return err
}

func (p *TColumn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumn(%+v)", *p)
}

type TColumnValue struct {
	Family    []byte `thrift:"family,1,required"`
	Qualifier []byte `thrift:"qualifier,2,required"`
	Value     []byte `thrift:"value,3,required"`
	Timestamp *int64 `thrift:"timestamp,4"`
}

func NewTColumnValue() *TColumnValue {
	rval := &TColumnValue{}
	return rval
}

func (p *TColumnValue) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TColumnValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumnValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumnValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumnValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TColumnValue) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TColumnValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnValue"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumnValue) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Family != nil {
		if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Family); err != nil {
			return fmt.Errorf("%T.family (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:family: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Qualifier != nil {
		if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Qualifier); err != nil {
			return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Value != nil {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Value); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnValue(%+v)", *p)
}

type TColumnIncrement struct {
	Family    []byte `thrift:"family,1,required"`
	Qualifier []byte `thrift:"qualifier,2,required"`
	Amount    *int64 `thrift:"amount,3"`
}

func NewTColumnIncrement() *TColumnIncrement {
	rval := &TColumnIncrement{
		Amount: new(int64),
	}
	*(rval.Amount) = 1
	return rval
}

func (p *TColumnIncrement) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *TColumnIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumnIncrement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumnIncrement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumnIncrement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Amount = &v
	}
	return nil
}

func (p *TColumnIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnIncrement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumnIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Family != nil {
		if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Family); err != nil {
			return fmt.Errorf("%T.family (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:family: %s", p, err)
		}
	}
	return err
}

func (p *TColumnIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Qualifier != nil {
		if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Qualifier); err != nil {
			return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
		}
	}
	return err
}

func (p *TColumnIncrement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:amount: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Amount)); err != nil {
			return fmt.Errorf("%T.amount (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:amount: %s", p, err)
		}
	}
	return err
}

func (p *TColumnIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnIncrement(%+v)", *p)
}

type TResult_ struct {
	Row          *[]byte         `thrift:"row,1"`
	ColumnValues []*TColumnValue `thrift:"columnValues,2,required"`
}

func NewTResult_() *TResult_ {
	rval := &TResult_{}
	return rval
}

func (p *TResult_) IsSetRow() bool {
	return p.Row != nil
}

func (p *TResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = &v
	}
	return nil
}

func (p *TResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.ColumnValues = tSlice
	for i := 0; i < size; i++ {
		_elem0 := NewTColumnValue()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.ColumnValues = append(p.ColumnValues, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if p.IsSetRow() {
			if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
			}
			if err := oprot.WriteBinary(*p.Row); err != nil {
				return fmt.Errorf("%T.row (1) field write error: %s", p, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:row: %s", p, err)
			}
		}
	}
	return err
}

func (p *TResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.ColumnValues != nil {
		if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columnValues: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.ColumnValues {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columnValues: %s", p, err)
		}
	}
	return err
}

func (p *TResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResult_(%+v)", *p)
}

type TGet struct {
	Row          []byte             `thrift:"row,1,required"`
	Columns      *[]*TColumn        `thrift:"columns,2"`
	Timestamp    *int64             `thrift:"timestamp,3"`
	TimeRange    *TTimeRange        `thrift:"timeRange,4"`
	MaxVersions  *int32             `thrift:"maxVersions,5"`
	FilterString *[]byte            `thrift:"filterString,6"`
	Attributes   *map[string][]byte `thrift:"attributes,7"`
}

func NewTGet() *TGet {
	rval := &TGet{}
	return rval
}

func (p *TGet) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TGet) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TGet) IsSetTimeRange() bool {
	return p.TimeRange != nil
}

func (p *TGet) IsSetMaxVersions() bool {
	return p.MaxVersions != nil
}

func (p *TGet) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TGet) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TGet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TGet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TGet) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = &tSlice
	for i := 0; i < size; i++ {
		_elem1 := NewTColumn()
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		(*p.Columns) = append((*p.Columns), _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TGet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TGet) ReadField4(iprot thrift.TProtocol) error {
	p.TimeRange = NewTTimeRange()
	if err := p.TimeRange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TimeRange, err)
	}
	return nil
}

func (p *TGet) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxVersions = &v
	}
	return nil
}

func (p *TGet) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.FilterString = &v
	}
	return nil
}

func (p *TGet) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = &tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		(*p.Attributes)[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TGet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGet"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TGet) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(*p.Columns)); err != nil {
				return fmt.Errorf("error writing list begin: %s", err)
			}
			for _, v := range *p.Columns {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v, err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s", err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TGet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField4(oprot thrift.TProtocol) (err error) {
	if p.TimeRange != nil {
		if p.IsSetTimeRange() {
			if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:timeRange: %s", p, err)
			}
			if err := p.TimeRange.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.TimeRange, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:timeRange: %s", p, err)
			}
		}
	}
	return err
}

func (p *TGet) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.maxVersions (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxVersions: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField6(oprot thrift.TProtocol) (err error) {
	if p.FilterString != nil {
		if p.IsSetFilterString() {
			if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:filterString: %s", p, err)
			}
			if err := oprot.WriteBinary(*p.FilterString); err != nil {
				return fmt.Errorf("%T.filterString (6) field write error: %s", p, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:filterString: %s", p, err)
			}
		}
	}
	return err
}

func (p *TGet) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:attributes: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(*p.Attributes)); err != nil {
				return fmt.Errorf("error writing map begin: %s", err)
			}
			for k, v := range *p.Attributes {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s", err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *TGet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGet(%+v)", *p)
}

type TPut struct {
	Row          []byte             `thrift:"row,1,required"`
	ColumnValues []*TColumnValue    `thrift:"columnValues,2,required"`
	Timestamp    *int64             `thrift:"timestamp,3"`
	WriteToWal   *bool              `thrift:"writeToWal,4"`
	Attributes   *map[string][]byte `thrift:"attributes,5"`
	Durability   *TDurability       `thrift:"durability,6"`
}

func NewTPut() *TPut {
	rval := &TPut{}
	return rval
}

func (p *TPut) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TPut) IsSetWriteToWal() bool {
	return p.WriteToWal != nil
}

func (p *TPut) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TPut) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TPut) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TPut) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TPut) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.ColumnValues = tSlice
	for i := 0; i < size; i++ {
		_elem4 := NewTColumnValue()
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.ColumnValues = append(p.ColumnValues, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TPut) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TPut) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.WriteToWal = &v
	}
	return nil
}

func (p *TPut) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = &tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key5 = v
		}
		var _val6 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val6 = v
		}
		(*p.Attributes)[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TPut) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TPut) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPut"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TPut) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField2(oprot thrift.TProtocol) (err error) {
	if p.ColumnValues != nil {
		if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columnValues: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.ColumnValues {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columnValues: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteToWal() {
		if err := oprot.WriteFieldBegin("writeToWal", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:writeToWal: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.WriteToWal)); err != nil {
			return fmt.Errorf("%T.writeToWal (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:writeToWal: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:attributes: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(*p.Attributes)); err != nil {
				return fmt.Errorf("error writing map begin: %s", err)
			}
			for k, v := range *p.Attributes {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s", err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *TPut) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:durability: %s", p, err)
		}
	}
	return err
}

func (p *TPut) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPut(%+v)", *p)
}

type TDelete struct {
	Row        []byte             `thrift:"row,1,required"`
	Columns    *[]*TColumn        `thrift:"columns,2"`
	Timestamp  *int64             `thrift:"timestamp,3"`
	DeleteType *TDeleteType       `thrift:"deleteType,4"`
	WriteToWal *bool              `thrift:"writeToWal,5"`
	Attributes *map[string][]byte `thrift:"attributes,6"`
	Durability *TDurability       `thrift:"durability,7"`
}

func NewTDelete() *TDelete {
	rval := &TDelete{
		DeleteType: new(TDeleteType),
	}
	*(rval.DeleteType) = 1
	return rval
}

func (p *TDelete) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TDelete) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TDelete) IsSetDeleteType() bool {
	return p.DeleteType != nil
}

func (p *TDelete) IsSetWriteToWal() bool {
	return p.WriteToWal != nil
}

func (p *TDelete) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TDelete) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TDelete) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TDelete) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TDelete) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = &tSlice
	for i := 0; i < size; i++ {
		_elem7 := NewTColumn()
		if err := _elem7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem7, err)
		}
		(*p.Columns) = append((*p.Columns), _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TDelete) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TDelete) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := TDeleteType(v)
		p.DeleteType = &temp
	}
	return nil
}

func (p *TDelete) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.WriteToWal = &v
	}
	return nil
}

func (p *TDelete) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = &tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key8 = v
		}
		var _val9 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val9 = v
		}
		(*p.Attributes)[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TDelete) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TDelete) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDelete"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TDelete) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(*p.Columns)); err != nil {
				return fmt.Errorf("error writing list begin: %s", err)
			}
			for _, v := range *p.Columns {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v, err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s", err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TDelete) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteType() {
		if err := oprot.WriteFieldBegin("deleteType", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:deleteType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DeleteType)); err != nil {
			return fmt.Errorf("%T.deleteType (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:deleteType: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteToWal() {
		if err := oprot.WriteFieldBegin("writeToWal", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:writeToWal: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.WriteToWal)); err != nil {
			return fmt.Errorf("%T.writeToWal (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:writeToWal: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:attributes: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(*p.Attributes)); err != nil {
				return fmt.Errorf("error writing map begin: %s", err)
			}
			for k, v := range *p.Attributes {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s", err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *TDelete) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:durability: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDelete(%+v)", *p)
}

type TIncrement struct {
	Row        []byte              `thrift:"row,1,required"`
	Columns    []*TColumnIncrement `thrift:"columns,2,required"`
	WriteToWal *bool               `thrift:"writeToWal,3"`
}

func NewTIncrement() *TIncrement {
	rval := &TIncrement{
		WriteToWal: new(bool),
	}
	*(rval.WriteToWal) = true
	return rval
}

func (p *TIncrement) IsSetWriteToWal() bool {
	return p.WriteToWal != nil
}

func (p *TIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIncrement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TIncrement) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnIncrement, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem10 := NewTColumnIncrement()
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.Columns = append(p.Columns, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TIncrement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.WriteToWal = &v
	}
	return nil
}

func (p *TIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIncrement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteToWal() {
		if err := oprot.WriteFieldBegin("writeToWal", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:writeToWal: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.WriteToWal)); err != nil {
			return fmt.Errorf("%T.writeToWal (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:writeToWal: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIncrement(%+v)", *p)
}

type TScan struct {
	StartRow     *[]byte            `thrift:"startRow,1"`
	StopRow      *[]byte            `thrift:"stopRow,2"`
	Columns      *[]*TColumn        `thrift:"columns,3"`
	Caching      *int32             `thrift:"caching,4"`
	MaxVersions  *int32             `thrift:"maxVersions,5"`
	TimeRange    *TTimeRange        `thrift:"timeRange,6"`
	FilterString *[]byte            `thrift:"filterString,7"`
	BatchSize    *int32             `thrift:"batchSize,8"`
	Attributes   *map[string][]byte `thrift:"attributes,9"`
}

func NewTScan() *TScan {
	rval := &TScan{
		MaxVersions: new(int32),
	}
	*(rval.MaxVersions) = 1
	return rval
}

func (p *TScan) IsSetStartRow() bool {
	return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
	return p.StopRow != nil
}

func (p *TScan) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TScan) IsSetCaching() bool {
	return p.Caching != nil
}

func (p *TScan) IsSetMaxVersions() bool {
	return p.MaxVersions != nil
}

func (p *TScan) IsSetTimeRange() bool {
	return p.TimeRange != nil
}

func (p *TScan) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TScan) IsSetBatchSize() bool {
	return p.BatchSize != nil
}

func (p *TScan) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TScan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TScan) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.StartRow = &v
	}
	return nil
}

func (p *TScan) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StopRow = &v
	}
	return nil
}

func (p *TScan) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = &tSlice
	for i := 0; i < size; i++ {
		_elem11 := NewTColumn()
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		(*p.Columns) = append((*p.Columns), _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TScan) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Caching = &v
	}
	return nil
}

func (p *TScan) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxVersions = &v
	}
	return nil
}

func (p *TScan) ReadField6(iprot thrift.TProtocol) error {
	p.TimeRange = NewTTimeRange()
	if err := p.TimeRange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TimeRange, err)
	}
	return nil
}

func (p *TScan) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.FilterString = &v
	}
	return nil
}

func (p *TScan) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.BatchSize = &v
	}
	return nil
}

func (p *TScan) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = &tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		var _val13 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val13 = v
		}
		(*p.Attributes)[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TScan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TScan"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TScan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.StartRow != nil {
		if p.IsSetStartRow() {
			if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:startRow: %s", p, err)
			}
			if err := oprot.WriteBinary(*p.StartRow); err != nil {
				return fmt.Errorf("%T.startRow (1) field write error: %s", p, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:startRow: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField2(oprot thrift.TProtocol) (err error) {
	if p.StopRow != nil {
		if p.IsSetStopRow() {
			if err := oprot.WriteFieldBegin("stopRow", thrift.STRING, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:stopRow: %s", p, err)
			}
			if err := oprot.WriteBinary(*p.StopRow); err != nil {
				return fmt.Errorf("%T.stopRow (2) field write error: %s", p, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:stopRow: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:columns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(*p.Columns)); err != nil {
				return fmt.Errorf("error writing list begin: %s", err)
			}
			for _, v := range *p.Columns {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v, err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s", err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaching() {
		if err := oprot.WriteFieldBegin("caching", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:caching: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Caching)); err != nil {
			return fmt.Errorf("%T.caching (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:caching: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.maxVersions (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxVersions: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField6(oprot thrift.TProtocol) (err error) {
	if p.TimeRange != nil {
		if p.IsSetTimeRange() {
			if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:timeRange: %s", p, err)
			}
			if err := p.TimeRange.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.TimeRange, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:timeRange: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField7(oprot thrift.TProtocol) (err error) {
	if p.FilterString != nil {
		if p.IsSetFilterString() {
			if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:filterString: %s", p, err)
			}
			if err := oprot.WriteBinary(*p.FilterString); err != nil {
				return fmt.Errorf("%T.filterString (7) field write error: %s", p, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:filterString: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err := oprot.WriteFieldBegin("batchSize", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:batchSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BatchSize)); err != nil {
			return fmt.Errorf("%T.batchSize (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:batchSize: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField9(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:attributes: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(*p.Attributes)); err != nil {
				return fmt.Errorf("error writing map begin: %s", err)
			}
			for k, v := range *p.Attributes {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s", err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScan(%+v)", *p)
}

type TMutation struct {
	Put          *TPut    `thrift:"put,1"`
	DeleteSingle *TDelete `thrift:"deleteSingle,2"`
}

func NewTMutation() *TMutation {
	rval := &TMutation{}
	return rval
}

func (p *TMutation) IsSetPut() bool {
	return p.Put != nil
}

func (p *TMutation) IsSetDeleteSingle() bool {
	return p.DeleteSingle != nil
}

func (p *TMutation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TMutation) ReadField1(iprot thrift.TProtocol) error {
	p.Put = NewTPut()
	if err := p.Put.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Put, err)
	}
	return nil
}

func (p *TMutation) ReadField2(iprot thrift.TProtocol) error {
	p.DeleteSingle = NewTDelete()
	if err := p.DeleteSingle.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeleteSingle, err)
	}
	return nil
}

func (p *TMutation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMutation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TMutation) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Put != nil {
		if p.IsSetPut() {
			if err := oprot.WriteFieldBegin("put", thrift.STRUCT, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:put: %s", p, err)
			}
			if err := p.Put.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Put, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:put: %s", p, err)
			}
		}
	}
	return err
}

func (p *TMutation) writeField2(oprot thrift.TProtocol) (err error) {
	if p.DeleteSingle != nil {
		if p.IsSetDeleteSingle() {
			if err := oprot.WriteFieldBegin("deleteSingle", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:deleteSingle: %s", p, err)
			}
			if err := p.DeleteSingle.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.DeleteSingle, err)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:deleteSingle: %s", p, err)
			}
		}
	}
	return err
}

func (p *TMutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMutation(%+v)", *p)
}

type TRowMutations struct {
	Row       []byte       `thrift:"row,1,required"`
	Mutations []*TMutation `thrift:"mutations,2,required"`
}

func NewTRowMutations() *TRowMutations {
	rval := &TRowMutations{}
	return rval
}

func (p *TRowMutations) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TRowMutations) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TRowMutations) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TMutation, 0, size)
	p.Mutations = tSlice
	for i := 0; i < size; i++ {
		_elem14 := NewTMutation()
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.Mutations = append(p.Mutations, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TRowMutations) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowMutations"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TRowMutations) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TRowMutations) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Mutations != nil {
		if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:mutations: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Mutations {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:mutations: %s", p, err)
		}
	}
	return err
}

func (p *TRowMutations) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowMutations(%+v)", *p)
}

type TIOError struct {
	Message *string `thrift:"message,1"`
}

func NewTIOError() *TIOError {
	rval := &TIOError{}
	return rval
}

func (p *TIOError) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TIOError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIOError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TIOError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIOError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIOError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return fmt.Errorf("%T.message (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:message: %s", p, err)
		}
	}
	return err
}

func (p *TIOError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIOError(%+v)", *p)
}

func (p *TIOError) Error() string {
	return p.String()
}

type TIllegalArgument struct {
	Message *string `thrift:"message,1"`
}

func NewTIllegalArgument() *TIllegalArgument {
	rval := &TIllegalArgument{}
	return rval
}

func (p *TIllegalArgument) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TIllegalArgument) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIllegalArgument) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TIllegalArgument) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIllegalArgument"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIllegalArgument) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return fmt.Errorf("%T.message (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:message: %s", p, err)
		}
	}
	return err
}

func (p *TIllegalArgument) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIllegalArgument(%+v)", *p)
}

func (p *TIllegalArgument) Error() string {
	return p.String()
}
